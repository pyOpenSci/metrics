---
title: pyOpenSci Package Metrics
jupyter: python3
execute:
  echo: false
---

This data provides metrics across pyOpenSci packages. 

```{python}
#| echo: false
#|
import ast
import warnings
from itables import show
from pathlib import Path

import altair as alt
import pandas as pd

# This is a local module that stores the plot theme
from pyosmetrics.plot_theme import load_poppins_font, register_and_enable_poppins_theme

pd.options.mode.chained_assignment = None
pd.options.future.infer_string = True

# Suppress all warnings
warnings.filterwarnings("ignore")

# Load the & register Poppins theme
load_poppins_font()
register_and_enable_poppins_theme()
```

```{python}
# Get the current notebook directory
package_data_path = Path.cwd().parents[0] / "_data" / "package_data.csv" 

# Read the DataFrame from the CSV file
package_df = pd.read_csv(package_data_path)

# Parse the "gh_meta" column back into dictionaries
package_df['gh_meta'] = package_df['gh_meta'].apply(
  lambda x: ast.literal_eval(x) if isinstance(x, str) else x
)
```

### Forks

```{python}
# Extract "forks_count" value from the 'gh_meta' column
package_df['forks_count'] = package_df['gh_meta'].apply(
  lambda x: x.get('forks_count'
  ) if isinstance(x, dict) else None
)
```

```{python}
# Render a graph plot of the fork count
chart = (
    alt.Chart(package_df).mark_bar(color="#81c0aa")
    .encode(
        alt.X('package_name', sort='-y')
            .title('Package name')
            .axis(labelAngle=45),
        alt.Y('forks_count:Q')
            .title('Fork count'),
    )
    .properties(title="Number of forks per repository")
    .configure_legend(
        orient='top',
        titleAnchor='middle',
        direction='horizontal',
        labelFontSize=5,
    )
    .interactive()
)

chart
```

### Contributors

```{python}
# Extract "contrib_count" value from the 'gh_meta' column
package_df['contrib_count'] = package_df['gh_meta'].apply(
  lambda x: x.get('contrib_count') if isinstance(x, dict) else None
)
```

```{python}
# Render a graph plot of contributor count
chart = (
    alt.Chart(package_df).mark_bar(color="#f47a78")
    .encode(
        alt.X('package_name', sort='-y')
            .title('Package name')
            .axis(labelAngle=45),
        alt.Y('contrib_count:Q')
            .title('Contributor count'),
    )
    .properties(title="Number of contributors per repository")
    .configure_legend(
        orient='top',
        titleAnchor='middle',
        direction='horizontal',
        labelFontSize=5,
    )
    .interactive()
)

chart
```

### Open issues

```{python}
# Extract "open_issues_count" value from the 'gh_meta' column
package_df['open_issues_count'] = package_df['gh_meta'].apply(
  lambda x: x.get('open_issues_count') if isinstance(x, dict) else None
)
```

```{python}
# Extract "open_issues_count" value from the 'gh_meta' column
package_df['open_issues_count'] = package_df['gh_meta'].apply(
  lambda x: x.get('open_issues_count') if isinstance(x, dict) else None
)
# Render a graph plot of open issue count
chart = (
    alt.Chart(package_df).mark_bar(color="#735fab")
    .encode(
        alt.X('package_name', sort='-y')
            .title('Package name')
            .axis(labelAngle=45),
        alt.Y('open_issues_count:Q')
            .title('Open issues count'),
    )
    .properties(title="Number of open issues per repository")
    .configure_legend(
        orient='top',
        titleAnchor='middle',
        direction='horizontal',
        labelFontSize=5,
    )
    .interactive()
)

chart
```

### Stargazers

```{python}
# Extract "stargazers_count" value from the 'gh_meta' column
package_df['stargazers_count'] = package_df['gh_meta'].apply(
  lambda x: x.get('stargazers_count') if isinstance(x, dict) else None
)
```

```{python}
# Render a graph plot of stargazer count
chart = (
    alt.Chart(package_df).mark_bar(color="#e8cd2a")
    .encode(
        alt.X('package_name', sort='-y')
            .title('Package name')
            .axis(labelAngle=45),
        alt.Y('stargazers_count:Q')
            .title('Stargazer count'),
    )
    .properties(title="Number of stargazers per repository")
    .configure_legend(
        orient='top',
        titleAnchor='middle',
        direction='horizontal',
        labelFontSize=5,
    )
    .interactive()
)

chart
```


### Detailed PyOpenSci metrics

Find bellow the detailed count for each PyOpenSci repository.

```{python}
# Create an itable to display the DataFrame
from itables import show

# Display the results as an interactive table
show(
  package_df[['package_name', 'forks_count', 'contrib_count', 'open_issues_count', 'stargazers_count']],
  max_rows=10
)
```
