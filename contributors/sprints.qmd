---
title: pyOpenSci Sprint Event Data
jupyter: python3
execute:
  echo: false
---


```{python}
#| echo: false
#| 
import warnings
from pathlib import Path

from itables import show
import altair as alt
import pandas as pd

# This is a local module that stores the plot theme
from pyosmetrics.plot_theme import load_poppins_font, register_and_enable_poppins_theme

pd.options.mode.chained_assignment = None
pd.options.future.infer_string = True

# Suppress all warnings
warnings.filterwarnings("ignore")

# Load the & register Poppins theme
load_poppins_font()
register_and_enable_poppins_theme()
```


The tables below show unique participants at each sprint event. 
This data is calculated from our sprint project table. 

For some reason it's not calculating the total participant correctly as we manually also talied participants and have higher numbers. Examples: we had 18 at PyCON 2024 participate but the data below shows a number that is smaller. Look into why! 

```{python}
# Get the current notebook directory
data_path = Path.cwd().parents[0] / "_data" / "sprint_data.csv" 

sprint_df = pd.read_csv(data_path)
# Display the first few rows of the dataframe
sprint_df.head()

# Extract year from the 'created' column
sprint_df['year'] = pd.to_datetime(sprint_df['created']).dt.year

# Get counts of unique contributors by event and by year. 
author_event_summary = sprint_df.groupby(["event", "author"]).size().reset_index(name='count')
unique_authors_by_event = author_event_summary.groupby("event")["author"].nunique().reset_index(name='unique_author_count')

# Summarize total contributions by year
total_contributors_by_year = sprint_df.groupby("year")["author"].nunique().reset_index(name='total_contributors')

show(unique_authors_by_event) 
```
```{python}
show(total_contributors_by_year)
```


```{python}

summary_df = sprint_df.groupby(["event", "type"]).size().unstack(fill_value=0)

summary_df = summary_df.rename(columns={"Issue": "Issue Count", "PullRequest": "PR Count"})
summary_df = summary_df.reset_index()

# Calculate total contribs by year
summary_df["year"] = summary_df["event"].str.extract(r'(\d{2,4})').astype(float).astype("Int64")
summary_df["total"] = summary_df["Issue Count"] + summary_df["PR Count"]

# Total contributions by year
annual_counts = summary_df.groupby("year")[["total"]].sum().reset_index()
```



## Total contributions to pyOpenSci by sprint event 


```{python}
summary_df = summary_df.sort_values(by="year")

chart = (
    alt.Chart(summary_df)
    .mark_bar()
    .encode(
        alt.X('event:N')
            .title('Event')
            .axis(labelAngle=0),
        alt.Y('value:Q')
            .title('Count'),
        alt.Color('type:N')
            .title('Type')
            .scale(range=["#81c0aa", "#735fab"]),
        alt.Tooltip(["event", "Issue Count", "PR Count"])
    )
    .transform_fold(
        fold=['Issue Count', 'PR Count'],
        as_=['type', 'value']
    )
    .properties(title="Total Contributions by Event")
    .interactive()
)

chart
```


## Total contributions to pyOpenSci during event sprints 2023 vs. 2024

```{python}
chart = (
    alt.Chart(annual_counts)
    .mark_bar()
    .encode(
        alt.X('year:O')
            .title('Year')
            .axis(labelAngle=0),
        alt.Y('total:Q')
            .title('Total Contributions'),
        alt.Tooltip(["year", "total"])
    )
    .properties(title="Total Sprint Contributions by Year")
    .interactive()
)

chart

```
