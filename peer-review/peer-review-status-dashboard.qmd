--- 
title: "pyOpenSci Current Review Status"
format: 
  dashboard:
    scrolling: true 
execute:
  echo: false
--- 


```{python}
#| echo: false
#| 
import os
from pathlib import Path

import warnings
from datetime import datetime, timezone

import altair as alt
from itables import show
import pandas as pd
import pytz
import plotly.express as px
from plotly.subplots import make_subplots
from pyosmeta import ProcessIssues
from pyosmeta.github_api import GitHubAPI

# Suppress all warnings
warnings.filterwarnings("ignore")
# Make tables nicer
pd.set_option("display.max_colwidth", None)
current_date = datetime.today().date()
today = current_date.strftime("%d %B %Y") 
```

*Last updated: **`{python} today`** *

```{python}
def clean_and_order(df, DROP_COLS, order):
    """Drop columns and reorder DataFrame columns."""
    return df.drop(columns=DROP_COLS, errors="ignore")[ORDER]

def get_status_df(df, status):
    return df[df["active_status"] == status].reset_index(drop=True)

DROP_COLS = ["date_accepted", "labels", "editor", "status", "active_status"] 
ORDER = ["Name", "Description", "Days Open", "Date Opened","Last Comment", "Last User to Comment", "Issue", "Categories", "eic"]

label_map = {
    "pre-review": [
        "New Submission!", 
        "0/pre-review-checks"],
    "seeking editor": ["0/seeking-editor"],
    "seeking reviewers": ["2/seeking-reviewers"],
    "under-review": [
        "1/editor-assigned",
        "3/reviewers-assigned",
        "4/reviews-in-awaiting-changes",
        "5/awaiting-reviewer-response",
    ],
    "accepted-open": ["6/pyOS-approved", "9/joss-approved"],
}

def get_active_status(labels):
    """A function that returns an active status value based on a list of label values"""
    for status, label_list in label_map.items():
        if any(label in labels for label in label_list):
            return status
    return "unknown"
```

```{python}
presub_path = data_path = Path.cwd().parents[0] / "_data" /  "review_presubmissions.csv"
presubmissions = pd.read_csv(
    presub_path,
    parse_dates=["date_opened", "date_closed", "last_comment_date"],
)
presubmissions["date_opened"] = presubmissions["date_opened"]
presubmissions["last_comment_date"] = presubmissions["last_comment_date"]
presubmissions = presubmissions.rename(
    columns={
        "package_name": "Name",
        "date_opened": "Date Opened",
        "date_closed": "Date Closed",
        "issue_num": "Issue",
        "description": "Description",
        "categories": "Categories",
        "last_comment_date": "Last Comment",
        "last_comment_user": "Last User to Comment",
    }
)

all_presubmissions = len(presubmissions)
```


```{python}
# Process presubmission data
open_presubmissions = presubmissions[presubmissions["Date Closed"].isna()]
today = datetime.now(timezone.utc)
open_presubmissions["days_open"] = (
    today - open_presubmissions["Date Opened"]
).dt.days
open_presubmissions["Date Opened"] = open_presubmissions["Date Opened"].dt.date
open_presubmissions["Last Comment"] = open_presubmissions["Last Comment"].dt.date
open_presubmissions.reset_index(drop=True, inplace=True)
open_presubmission_count = len(open_presubmissions)
```

```{python}
#| echo: false

# Open submission review data
data_path = Path.cwd().parents[0] / "_data" / "review_submissions.csv"
reviews = pd.read_csv(data_path,
    parse_dates=["date_opened", "date_closed", "last_comment_date"],
)
reviews["date_opened"] = reviews["date_opened"]
reviews["last_comment_date"] = reviews["last_comment_date"]
reviews = reviews.rename(
    columns={
        "package_name": "Name",
        "date_opened": "Date Opened",
        "date_closed": "Date Closed",
        "issue_num": "Issue",
        "description": "Description",
        "categories": "Categories",
        "last_comment_date": "Last Comment",
        "last_comment_user": "Last User to Comment",
    }
)

open_reviews = reviews[reviews["Date Closed"].isna()]
open_reviews.drop(columns=["Date Closed","Unnamed: 0"], inplace=True)
total_open = len(open_reviews)

```




```{python}
#| echo: false

# Create active status column
open_reviews["active_status"] = open_reviews["labels"].apply(get_active_status)

```

```{python}
#| echo: false

# Add days open to table
open_reviews["Days Open"] = (today - open_reviews["Date Opened"]).dt.days
open_reviews["Date Opened"] = open_reviews["Date Opened"].dt.date
open_reviews["Last Comment"] = open_reviews["Last Comment"].dt.date
```

```{python}
#| echo: false
#| 
# Determine overall review stage each item is in
review_status_ct = open_reviews["active_status"].value_counts().reset_index()
review_status_ct.rename(columns={"labels": "status"}, inplace=True)

seeking_editor = clean_and_order(get_status_df(open_reviews, "seeking editor"),DROP_COLS, ORDER)
seeking_reviewer = clean_and_order(get_status_df(open_reviews, "seeking reviewers"),DROP_COLS, ORDER)

seeking_editor_count = len(seeking_editor)
```


## Row {height=1%}

```{python}
#| content: valuebox
#| title: "Current Open Reviews"

dict(
  icon = "box2-heart",
  color = "primary",
  value = total_open
)
```

```{python}
#| content: valuebox
#| title: "Open Presubmissions"
# fails if the value isn't an int
dict(
  icon = "person-hearts",
  color = "primary",
  value = open_presubmission_count
)
```

```{python}
#| content: valuebox
#| title: "Seeking Editors"
# fails if the value isn't an int
dict(
  icon = "copy",
  color = "primary",
  value = seeking_editor_count
)
```

```{python}
#| content: valuebox
#| title: "Seeking Reviewers"
# fails if the value isn't an int
dict(
  icon = "copy",
  color = "primary",
  value = len(seeking_reviewer)
)
```

## Row {height=1%}

```{python}
#| title: "Packages Seeking an Editor"
show(seeking_editor)
```

## Row {height=1%}

```{python}
#| title: "Packages Seeking Reviewers"
show(seeking_reviewer)
```

## Row {height=1%}

```{python}
#| title: "Open Presubmission Inquiries"
show(open_presubmissions)
```

## Row {height=4%}

```{python}
#| title: "Open Reviews Sorted by Last Comment Date"
print("Reviews that have been quiet for the longest period of time are at the top.")

open_reviews = open_reviews.sort_values("Last Comment", ascending=True)

new_order = ["Name", "editor", "Last Comment", "Last User to Comment", "eic", "Issue", "active_status", "Description", "Date Opened"]  

show(open_reviews[new_order])
```
