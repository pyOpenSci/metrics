---
title: Current Python Peer Review Status | pyOpenSci
jupyter: python3
execute:
  echo: false
---

## Current open reviews 

This page overviews the current state of pyOpenSci open peer review submissions. 


```{python}
#| echo: false
#| 
import os
from pathlib import Path

import warnings
from datetime import datetime, timezone

import altair as alt
from itables import show
import pandas as pd
import pytz
from pyosmeta import ProcessIssues
from pyosmeta.github_api import GitHubAPI

# Suppress all warnings
warnings.filterwarnings("ignore")
# Make tables nicer
pd.set_option("display.max_colwidth", None)
current_date = datetime.today().date()
today = current_date.strftime("%d %B %Y") 
```

*Last updated: **`{python} today`***

```{python}
# Map issue labels based on state of review package is in.
label_map = {
    "pre-review": [
        "New Submission!", 
        "0/pre-review-checks"],
    "seeking editor": ["0/seeking-editor"],
    "seeking reviewers": ["2/seeking-reviewers"],
    "under-review": [
        "1/editor-assigned",
        "3/reviewers-assigned",
        "4/reviews-in-awaiting-changes",
        "5/awaiting-reviewer-response",
    ],
    "accepted-open": ["6/pyOS-approved", "9/joss-approved"],
}

def get_active_status(labels):
    """A function that returns an active status value based on a list of label values"""
    for status, label_list in label_map.items():
        if any(label in labels for label in label_list):
            return status
    return "unknown"


```

```{python}
presub_path = data_path = Path.cwd().parents[0] / "_data" /  "review_presubmissions.csv"
presubmissions = pd.read_csv(
    presub_path,
    parse_dates=["date_opened", "date_closed", "last_comment_date"],
)
presubmissions["date_opened"] = presubmissions["date_opened"]
presubmissions["last_comment_date"] = presubmissions["last_comment_date"]
presubmissions = presubmissions.rename(
    columns={
        "package_name": "Name",
        "date_opened": "Date Opened",
        "date_closed": "Date Closed",
        "issue_num": "Issue",
        "description": "Description",
        "categories": "Categories",
        "last_comment_date": "Last Comment",
        "last_comment_user": "Last User to Comment",
    }
)

all_presubmissions = len(presubmissions)
```


```{python}
# Process presubmission data
open_presubmissions = presubmissions[presubmissions["Date Closed"].isna()]
today = datetime.now(timezone.utc)
open_presubmissions["days_open"] = (
    today - open_presubmissions["Date Opened"]
).dt.days
open_presubmissions["Date Opened"] = open_presubmissions["Date Opened"].dt.date
open_presubmissions["Last Comment"] = open_presubmissions["Last Comment"].dt.date
open_presubmissions.reset_index(drop=True, inplace=True)

```

```{python}
#| echo: false

# Open submission review data
data_path = Path.cwd().parents[0] / "_data" / "review_submissions.csv"
reviews = pd.read_csv(data_path,
    parse_dates=["date_opened", "date_closed", "last_comment_date"],
)
reviews["date_opened"] = reviews["date_opened"]
reviews["last_comment_date"] = reviews["last_comment_date"]
reviews = reviews.rename(
    columns={
        "package_name": "Name",
        "date_opened": "Date Opened",
        "date_closed": "Date Closed",
        "issue_num": "Issue",
        "description": "Description",
        "categories": "Categories",
        "last_comment_date": "Last Comment",
        "last_comment_user": "Last User to Comment",
    }
)

open_reviews = reviews[reviews["Date Closed"].isna()]
open_reviews.drop(columns=["Date Closed","Unnamed: 0"], inplace=True)
total_open = len(open_reviews)

```


```{python}
#| echo: false

# Create active status column
open_reviews["active_status"] = open_reviews["labels"].apply(get_active_status)

```

```{python}
#| echo: false

# Add days open to table
open_reviews["Days Open"] = (today - open_reviews["Date Opened"]).dt.days
open_reviews["Date Opened"] = open_reviews["Date Opened"].dt.date
open_reviews["Last Comment"] = open_reviews["Last Comment"].dt.date
```

```{python}
# Determine overall review stage each item is in
# TODO: what is getting labeled as unknown?
review_status_ct = open_reviews["active_status"].value_counts().reset_index()
review_status_ct.rename(columns={"labels": "status"}, inplace=True)

seeking_editor = open_reviews[open_reviews["active_status"]=="seeking editor"]
seeking_editor_count = len(seeking_editor)
```


## Current review status 

Below is an overview of Python package reviews that are currently open in the 
pyOpenSci peer review process. 


```{python}

bar_chart = (
    alt.Chart(review_status_ct)
    .mark_bar(color="purple")
    .encode(
        x=alt.X("active_status:N", 
        title="Active Status", sort="-y",axis=alt.Axis(labelAngle=0)),
        y=alt.Y("count:Q", title="Count"),
    tooltip=["active_status", "count"]
    )
).properties(
    title="pyOpenSci: Active Review Status", width="container"
)


bar_chart.show()

```

### Active and open reviews
```{python}
def categorize_status(status):
    if status in ["under-review", "seeking editor", "seeking reviewers"]:
        return "Under Review"
    elif status == "pre-review":
        return "Pre-Review"
    elif status == "accepted-open":
        return "Accepted Open"
    return "Other"

review_status_ct["grouped_status"] = review_status_ct["active_status"].apply(categorize_status)
grouped_status_ct = review_status_ct.groupby("grouped_status", as_index=False)["count"].sum()
```
```{python}

bar_chart = (
    alt.Chart(grouped_status_ct)
    .mark_bar(color="purple")
    .encode(
        x=alt.X("grouped_status:N", 
        title="Open Reviews", sort="-y",axis=alt.Axis(labelAngle=0)),
        y=alt.Y("count:Q", title="Count"),
    tooltip=["grouped_status", "count"]
    )
).properties(
    title="pyOpenSci: Active Review Status", width="container"
)


bar_chart.show()
```



```{python}
only_active = grouped_status_ct[grouped_status_ct != "Accepted Open"].dropna()

bar_chart = (
    alt.Chart(only_active)
    .mark_bar(color="purple")
    .encode(
        x=alt.X("grouped_status:N", 
        title="Open Reviews", sort="-y",axis=alt.Axis(labelAngle=0)),
        y=alt.Y("count:Q", title="Count"),
    tooltip=["grouped_status", "count"]
    )
).properties(
    title="pyOpenSci: Active Review Status", width="container"
)


bar_chart.show()
```
### All open reviews 

pyOpenSci currently has **`{python} total_open`** open
reviews and **`{python} len(open_presubmissions)`** open pre-submission inquiries.

```{python}
#| echo: false
# status_df = open_reviews.drop(columns=["status","labels", "Categories"])
label_order = ["Name","active_status", "Date Opened", "Days Open", "Last Comment", "Last User to Comment", "editor", "eic", "Issue"]
status_df = open_reviews[label_order]
status_df.reset_index(drop=True, inplace=True)
# Create active status column
show(status_df)
```


## Editors needed

**`{python} seeking_editor_count`** packages, listed below, need editors.

```{python}
seeking_editor = status_df[status_df["active_status"]=="seeking editor"]
seeking_editor.reset_index(drop=True, inplace=True)
show(seeking_editor)
```


## Reviewers needed


```{python}

seeking_reviewers = status_df[
    status_df["active_status"] == "seeking reviewers"]
seeking_reviewers.reset_index(drop=True, inplace=True)

```
`{python} len(seeking_reviewers)` package(s) currently needs reviewers. 


```{python}
show(seeking_reviewers)
```


## Open review presubmission inquiries

There are currently **`{python} len(open_presubmissions)`** open presubmission inquiries. The current EiC handles all presubmission inquiries,

There are **`{python} len(open_presubmissions)` presubmission requests** currently open.

```{python}
# TODO: add days open to presubs too
open_presubmissions.dtypes
label_order_presub = ["Name",  "Date Opened",  "Last Comment", "Last User to Comment", "eic", "Issue"]

open_presubs_clean = open_presubmissions[label_order_presub]
```

```{python}

open_presubs_clean.reset_index(drop=True, inplace=True)
show(open_presubs_clean)
```


## Editorial team workload overview

```{python}
# get editor team data
editor_path = Path.cwd().parents[0] / "_data" /  "editorial_team_domains.csv"
editor_data = pd.read_csv(editor_path)
editor_data.columns
editor_data = editor_data[["gh_username","first_name","Domain_areas","Description","technical_areas"]]
all_editors_df = editor_data[["gh_username"]].rename(columns={"gh_username": "editor"})

# Get busy editors
busy_editors = open_reviews.loc[open_reviews.editor != "TBD", ["editor"]].value_counts().reset_index()
```

```{python}
all_editor_activity = all_editors_df.merge(busy_editors, on="editor", how="outer").fillna(0)

all_editor_activity["count"]= all_editor_activity["count"].astype(int)
all_editor_activity.sort_values(by="count", inplace=True)
all_editor_activity = all_editor_activity.reset_index(drop=True)
```

```{python}
# Get counts of available and unavailable editors
available_editors = all_editor_activity[all_editor_activity["count"] == 0]
all_busy_editors = all_editor_activity[all_editor_activity["count"] != 0]

num_available_editors = len(available_editors)
available_editors = available_editors.merge(editor_data, left_on="editor", right_on="gh_username", how="inner")
available_editors = available_editors.rename(columns={"count": "review count"})
available_editors = available_editors[["editor", "review count", "Domain_areas", "Description", "technical_areas", "first_name"]]
```

There are currently **`{python} len(available_editors)` available editors** and **`{python} len(all_busy_editors)` editors who are assigned to atleast one software review**.

### All pyOpenSci editors 
```{python}
show(editor_data)
```

### Busy editors running reviews 
```{python}
show(busy_editors)
```


### Editors available for a review

Below are editors that currently do not have submissions assigned to them.

```{python}

show(available_editors)
```


```{python}
# TODO: calculate time that they were in review.
#all_editor_activity
```

## Editor load

Next, we look at the load of each editor over time to get a sense of their time demands. 

::: {.callout-note}
The data below represents all editors over time, not just currently active editors
:::

```{python}
# TODO: make this focus only on current open reviews vs all reviews over time. 

# Get a list of all editors over time that have supported pyOpenSci
ignore_editors = ["TBD"]

ignore_editors += ["lwasser", "xmnlab"]
editors = [
    editor
    for editor in pd.unique(reviews.editor)
    if editor not in ignore_editors
]
n_edits = (
    reviews.groupby([reviews["editor"], reviews["Date Opened"].dt.to_period("Q")])
    .size()
    .reset_index(name="n_edits")  # Ensures a DataFrame with column name
)
```



```{python}

n_edits_filtered = n_edits[~n_edits["editor"].isin(ignore_editors)]
n_edits_filtered = n_edits_filtered.rename(columns={"Date Opened": "Date", "n_edits": "count"})
# Date should be a standard date time
df = n_edits_filtered.copy()
df[["Year", "Quarter"]] = df["Date"].astype(str).str.extract(r"(\d{4})Q(\d)").astype(int)
df["Date"] = pd.to_datetime(df["Year"].astype(str) + "-" + (3 * (df["Quarter"].astype(int) - 1) + 1).astype(str) + "-01")
```

```{python}
# This likely should be active edits?
edits = reviews.rename(columns={"Date Opened": "Date"}).copy()
```



```{python}

# TODO: If this uses open_reviews it's only showing current load
# if it uses the reviews df it's showing reviews all time 2019 to present. open_reviews has a slightly different structure
edits = reviews[["editor", "Name", "Date Opened"]]
edits = edits.rename(columns={"Date Opened": "Date", "Name":"package_name"})
edits = edits[edits["editor"] != "TBD"]

```

```{python}
charts = [
    alt.Chart(edits.loc[edits.editor == editor])
    .mark_bar(color="purple")
    .encode(
        x=alt.X("yearquarter(Date):T"),
        y=alt.Y("count(package_name)", title="Number of edits per quarter"),
        tooltip=["yearquarter(Date)", "count(package_name)"],
    )
    .properties(
        title=alt.TitleParams(
            text=f"{editor}",
            fontSize=18,
            orient="right",
            angle=0,
            align="right",
        ),
        width=600,
        height=200,
    )
    for editor in editors
]

full_chart = alt.vconcat(*charts).resolve_scale(x="shared", y="shared")
full_chart.show()
```